function getClosestSortable(t){for(;t;){if(t.className&&t.className.indexOf("react-sortable-item")>=0)return t;t=t.parentNode}return null}function getNextNode(t){for(var e,a=t.parentNode,i=a.children,o=1/0,s=null,n=t.offsetTop,r=0;r<i.length;r+=1)if(e=i[r],e.getAttribute("data-sortable-key")!==t.getAttribute("data-sortable-key")){var l=e.offsetTop-n;l>0&&o>l&&(o=l,s=e)}return s}function indexChildren(t){for(var e="node-",a={},i=[],o=0;o<t.length;o+=1)id=e+(o+1),i.push(id),t[o]=React.addons.cloneWithProps(t[o],{className:"react-sortable-item",key:id,"data-sortable-key":id}),a[id]=t[o];return{map:a,ids:i}}var ReactSortable=React.createClass({displayName:"ReactSortable",componentWillMount:function(){var t=indexChildren(this.props.children);this.setState({order:t.ids,sortableMap:t.map})},componentWillReceiveProps:function(t){if(t.children){var e=indexChildren(this.props.children);this.setState({order:e.ids,sortableMap:e.map})}},getInitialState:function(){return{order:[],startPosition:null,activeItem:null,sortableMap:{}}},onDragStop:function(){this.setState({activeItem:null,startPosition:null})},onDrag:function(){var t=this.refs.handle.getDOMNode(),e=getNextNode(t),a=t.getAttribute("data-sortable-key"),i=this.state.order,o=i.indexOf(a);i.splice(o,1);var s=null,n=i.length;e&&(s=e.getAttribute("data-sortable-key"),n=i.indexOf(s)),i.splice(n,0,a),this.setState({order:i})},onMouseDown:function(t){this.setState({mouseDownPosition:{x:t.clientX,y:t.clientY}})},onMouseMove:function(t){if(!this.state.activeItem){var e=this.state.mouseDownPosition;if(!e)return;if(Math.abs(t.clientX-e.x)>=5||Math.abs(t.clientY-e.y)>=5){var a=getClosestSortable(t.target),i=a.getBoundingClientRect(),o=t.nativeEvent;this.activeItem=a,this.setState({mouseDownPosition:null,activeItem:a.getAttribute("data-sortable-key"),startPosition:{x:i.left,y:i.top}},function(){this.refs.handle.handleDragStart(o)}.bind(this))}}},render:function(){var t,e=this.state.order.map(function(t){var e="";return this.state.activeItem===t&&(e+="react-sortable-item-active"),React.addons.cloneWithProps(this.state.sortableMap[t],{onMouseDown:this.onMouseDown,onMouseMove:this.onMouseMove,className:e})},this);if(this.state.activeItem){var a=this.state.startPosition;t=React.addons.cloneWithProps(this.state.sortableMap[this.state.activeItem],{className:"react-sortable-handle"}),t=React.createElement(ReactDrag,{onStop:this.onDragStop,onDrag:this.onDrag,ref:"handle",start:{x:a.x,y:a.y}},t)}return React.createElement("div",{ref:"wrapper"},e,t)}});