function getClosestSortable(t){for(;t;){if(t.className&&t.className.indexOf("react-sortable-item")>=0)return t;t=t.parentNode}return null}function getNextNode(t){for(var e,a=t.parentNode,i=a.children,r=1/0,o=null,n=t.offsetTop,s=0;s<i.length;s+=1)if(e=i[s],e!==t){var l=e.offsetTop-n;l>0&&r>l&&(r=l,o=e)}return o}var ReactSortable=React.createClass({displayName:"ReactSortable",_indexChildren:function(t){var e,a=[],i="node-";this.sortableMap={};for(var r=0;r<t.length;r+=1)e=i+(r+1),a.push(e),t[r]=React.addons.cloneWithProps(t[r],{className:"react-sortable-item","data-sortable-id":e}),this.sortableMap[e]=t[r];this.setState({order:a})},componentWillMount:function(){this._indexChildren(this.props.children)},componentWillReceiveProps:function(t){t.children&&this._indexChildren(t.children)},getInitialState:function(){return this.activeNode=null,{order:[],activeItem:null}},onDragStart:function(t){var e=getClosestSortable(t.target);this.activeNode=e,this.setState({activeItem:e.getAttribute("data-sortable-id")})},onDragStop:function(){this.activeNode.style.top="0px",this.activeNode.style.left="0px",this.activeNode=null,this.setState({activeItem:null})},onDrag:function(){var t=this.activeNode.nextSibling,e=getNextNode(this.activeNode);if(t!==e){var a=this.activeNode.getAttribute("data-sortable-id"),i=this.state.order,r=i.length;i.splice(i.indexOf(a),1),e&&(r=i.indexOf(e.getAttribute("data-sortable-id")),console.log(r)),i.splice(r,0,a),this.setState({order:i})}},render:function(){var t=this.state.order.map(function(t){var e=this.sortableMap[t];return t===this.state.activeItem&&(e=React.addons.cloneWithProps(e,{className:"react-sortable-item-active"})),React.createElement(ReactDrag,{handle:this.props.handle,onDrag:this.onDrag,onStart:this.onDragStart,onStop:this.onDragStop},e)},this);return React.createElement("div",{ref:"wrapper"},t)}});