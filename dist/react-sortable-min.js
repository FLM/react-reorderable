function getClosestSortable(t){for(;t;){if(t.className&&t.className.indexOf("react-sortable-item")>=0)return t;t=t.parentNode}return null}function getCurrentPosition(t){for(var e=t.parentNode,o=e.children,r=0;r<o.length;r+=1)if(o[r]===t)return{prev:o[r-1]||null,next:o[r+1]||null};return{prev:null,next:null}}function getNodePosition(t){return{next:getNextNode(t),prev:getPrevNode(t)}}function getNextNode(t){for(var e,o=t.parentNode,r=o.children,n=1/0,i=null,a=0;a<r.length;a+=1)e=r[a],e!==t&&e.offsetTop>t.offsetTop&&e.offsetTop-t.offsetTop<n&&(n=e.offsetTop-t.offsetTop,i=e);return i}function getPrevNode(t){for(var e,o=t.parentNode,r=o.children,n=1/0,i=null,a=r.length-1;a>=0;a-=1)e=r[a],e!==t&&e.offsetTop<t.offsetTop&&t.offsetTop-e.offsetTop<n&&(n=t.offsetTop-e.offsetTop,i=e);return i}var ReactSortable=React.createClass({displayName:"ReactSortable",_indexChildren:function(t){var e,o=[],r="node-";this.sortableMap={};for(var n=0;n<t.length;n+=1)e=r+(n+1),o.push(e),t[n]=React.addons.cloneWithProps(t[n],{className:"react-sortable-item","data-sortable-id":e}),this.sortableMap[e]=t[n];this.setState({order:o})},componentWillMount:function(){this._indexChildren(this.props.children)},componentWillReceiveProps:function(t){t.children&&this._indexChildren(t.children)},getInitialState:function(){return this.activeNode=null,{order:[]}},onDragStart:function(t){var e=getClosestSortable(t.target);e.style.position="relative",this.activeNode=e},onDragStop:function(){this.activeNode.style.position="static",this.activeNode.style.left="0px",this.activeNode.style.top="0px",this.activeNode=null},onDrag:function(){var t=getNodePosition(this.activeNode),e=getCurrentPosition(this.activeNode);if(t&&(t.next!==e.next||t.prev!==e.prev)){var o=this.activeNode.getAttribute("data-sortable-id"),r=this.state.order,n=r.length;t.next&&(n=r.indexOf(t.next.getAttribute("data-sortable-id"))),this.setState(React.addons.update(this.state,{order:{$splice:[[r.indexOf(o),1],[n,0,o]]}}))}},render:function(){var t=this.state.order.map(function(t){var e=this.sortableMap[t];return React.createElement(ReactDrag,{handle:this.props.handle,onDrag:this.onDrag,onStart:this.onDragStart,onStop:this.onDragStop},e)},this);return React.createElement("div",{ref:"wrapper"},t)}});